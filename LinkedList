package geniriclinkedlist;

public class GeniricLinkedList<T> {

    Node head;
    private Node tail;
    private int size = 0;

    @Override
    public String toString() {
        String s = "{";
        Node current = head;
        if (head == null) {
            return "{ }";
        }
        while (current != null) {
            s += current.getData() + " ";
            current = current.getNext();
        }

        return s + "}";
    }

    void addFirst(T data) {
        Node temp = new Node(data);
        if (head == null) {
            head = tail = temp;
        } else {
            temp.setNext(head);
            head = temp;
        }
        size++;
    }

    void addLast(T data) {
        Node temp = new Node(data);
        if (head == null) {
            head = tail = temp;
        } else {
            tail.setNext(temp);
            tail = temp;

        }
        size++;
    }

    T getFirst() {
        T data = (T) head.getData();
        return data;
    }

    T getLast() {
        T data = (T) tail.getData();
        return data;
    }

    T removeFirst() {
        T data = (T) head.getData();
        if (head == null) {
            throw new RuntimeException();
        } else if (head == tail) {

            head = tail = null;
            size--;
        } else {

            head = head.getNext();
            size--;
        }
        return data;
    }

    T removeLast() {
        T data = (T) tail.getData();
        if (head == null) {
            throw new RuntimeException();
        } else if (head == tail) {

            head = tail = null;
            size--;
        } else {
            Node current = head;
            while (current.getNext() != tail) {
                current = current.getNext();
            }
            tail = current;
            tail.setNext(null);
            size--;
        }
        return data;
    }

    void addByIndex(int index, T data) {
        Node temp = new Node(data);
        if (index == 1) {
            addFirst(data);
        } else if (index == size + 1) {
            addLast(data);
        } else {
            Node current = head;
            for (int i = 1; i < index - 1; i++) {
                current = current.getNext();

            }
            temp.setNext(current.getNext());
            current.setNext(temp);

        }
        size++;
    }

    T getByIndex(int index) {
        Node current = head;
        T data = null;
//        if (index < 1 || index > size) {
//            throw new RuntimeException();
//    } else {
        for (int i = 1; i < index; i++) {
            current = current.getNext();
        }
        data = (T) current.getData();
        //   }
        return data;
    }

    boolean contains(T value) {
        boolean res = false;
        Node current = head;
        for (int i = 1; i <= size; i++) {
            if ((current.getData()).equals(value)) {
                res = true;
                break;
            }
            current = current.getNext();
        }
        return res;
    }

    T removeByIndex(int index) {
        T data;
        if (index == 1) {
            data = removeFirst();
        } else if (index == size) {
            data = removeLast();
        } else {
            Node current = head;
            for (int i = 1; i < index - 1; i++) {
                current = current.getNext();
            }
            data = (T) current.getNext().getData();
            Node end = current.getNext().getNext();
            current.setNext(end);
            size--;
            if (end == tail) {
                tail = current;
            }

        }
        return data;
    }

    void rotate(int r) {
        if (r == size || r % size == 0 || r == 0) {
            return;
        }

        Node newtail = head;
        Node end = head;
        while (end != tail) {
            if (r > 0) {
                --r;

                end = end.getNext();
            } else {
                newtail = newtail.getNext();
                end = end.getNext();
            }
        }
        end.setNext(head);
        head = newtail.getNext();
        newtail.setNext(null);
        tail = newtail;

    }

    void revers() {
        tail = head;
        Node pointer = head;
        Node pre = null;
        Node current = head;
        while (pointer != null) {
            current = pointer;
            pointer = pointer.getNext();
            current.setNext(pre);
            pre = current;
            head = current;
        }

    }

    int indexOf(T data) {
        int index = -1;
        int o = 1;
        Node current = head;
        while (current != null) {
            if (current.getData() == data) {
                index = o;
                break;
            }
            current = current.getNext();
            o++;
        }
        return index;
    }

    int lastIndexOf(T data) {
        int index = -1;
        int o = 1;
        Node current = head;
        while (current != null) {
            if (current.getData() == data) {
                index = o;

            }
            current = current.getNext();
            o++;
        }
        return index;
    }

    void set(int index, T data) {
        Node current = head;
        for (int i = 1; i < index; i++) {
            current = current.getNext();
        }
        current.setData(data);
    }



   

    GeniricLinkedList addAllByIndex(GeniricLinkedList a1, GeniricLinkedList a2, int index) {
        GeniricLinkedList a = new GeniricLinkedList();
        Node current = head;
        Node pre = a2.head;
        Node next = head.getNext();
        for (int i = 1; i < index - 1; i++) {
            current = current.getNext();
            next = next.getNext();
        }
        current.setNext(pre);
        a2.tail.setNext(next);

        return a1;
    }


}
